CHART NAME: {{ .Chart.Name }}
CHART VERSION: {{ .Chart.Version }}
APP VERSION: {{ .Chart.AppVersion }}

** Please be patient while the chart is being deployed **

{{- if .Values.ingress.enabled }}

1. Get the Odoo URL indicated on the Ingress Rule and associate it to your cluster external IP:

   export CLUSTER_IP=$(minikube ip) # On Minikube. Use: `kubectl cluster-info` on others K8s clusters
   export HOSTNAME=$(kubectl get ingress --namespace {{ .Release.Namespace }} {{ template "odoo-cs.fullname" . }} -o jsonpath='{.spec.rules[0].host}')
   echo "Odoo URL: http://$HOSTNAME/"
   echo "$CLUSTER_IP  $HOSTNAME" | sudo tee -a /etc/hosts

{{- else }}

1. Get the Odoo URL by running:

{{- $odooPort := coalesce .Values.service.ports.http .Values.service.port | toString }}
{{- if eq .Values.service.type "NodePort" }}

  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ template "odoo-cs.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo "Odoo URL: http://$NODE_IP:$NODE_PORT/"

{{- else if eq .Values.service.type "LoadBalancer" }}

** Please ensure an external IP is associated to the {{ template "odoo-cs.fullname" . }} service before proceeding **
** Watch the status using: kubectl get svc --namespace {{ .Release.Namespace }} -w {{ template "odoo-cs.fullname" . }} **

  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ template "odoo-cs.fullname" . }} --template "{{ "{{ range (index .status.loadBalancer.ingress 0) }}{{ . }}{{ end }}" }}")
  echo "Odoo URL: http://$SERVICE_IP{{- if ne $odooPort "80" }}:{{ $odooPort }}{{ end }}/"

{{- else if eq .Values.service.type "ClusterIP" }}

  echo "Odoo URL: http://127.0.0.1:8080/"
  kubectl port-forward --namespace {{ .Release.Namespace }} svc/{{ template "odoo-cs.fullname" . }} 8080:{{ $odooPort }}

{{- end }}
{{- end }}

2. Obtain the login credentials

  export ODOO_EMAIL={{ .Values.odooEmail }}
  export ODOO_PASSWORD=$(kubectl get secret --namespace {{ .Release.Namespace }} {{ include "odoo-cs.secretName" . }} -o jsonpath="{.data.odoo-password}" | base64 -d)

  echo Email   : $ODOO_EMAIL
  echo Password: $ODOO_PASSWORD

3. Configure your external database

Make sure your external PostgreSQL database is accessible and contains the database specified in your values:
- Database Host: {{ .Values.externalDatabase.host }}
- Database Port: {{ .Values.externalDatabase.port }}
- Database Name: {{ .Values.externalDatabase.database }}
- Database User: {{ .Values.externalDatabase.user }}
