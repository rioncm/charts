apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "bookstack.fullname" . }}
  labels:
    {{- include "bookstack.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "bookstack.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "bookstack.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "bookstack.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
          env:
            - name: PUID
              value: {{ .Values.bookstack.puid | quote }}
            - name: PGID
              value: {{ .Values.bookstack.pgid | quote }}
            - name: TZ
              value: {{ .Values.bookstack.timezone | quote }}
            - name: APP_URL
              value: {{ .Values.bookstack.appUrl | quote }}
            - name: APP_KEY
              {{- $useSecret := or .Values.bookstack.appKeySecret (and .Values.bookstack.createAppKeySecret .Values.bookstack.appKey) }}
              {{- if $useSecret }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "bookstack.appKeySecretName" . }}
                  key: {{ .Values.bookstack.appKeySecretKey }}
              {{- else }}
              value: {{ include "bookstack.appKey" . | quote }}
              {{- end }}
            - name: DB_HOST
              value: {{ .Values.database.host | quote }}
            - name: DB_PORT
              value: {{ .Values.database.port | quote }}
            - name: DB_DATABASE
              value: {{ .Values.database.name | quote }}
            - name: DB_USERNAME
              value: {{ .Values.database.username | quote }}
            - name: DB_PASSWORD
              {{- if or .Values.database.existingSecret (include "bookstack.createDbSecret" .) }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "bookstack.dbSecretName" . }}
                  key: {{ .Values.database.existingSecretKey | default "password" }}
              {{- else }}
              value: {{ .Values.database.password | quote }}
              {{- end }}
            {{- with .Values.bookstack.extraEnv }}
            {{- toYaml . | nindent 12 }}
            {{- end }}
          {{- with .Values.bookstack.extraEnvFrom }}
          envFrom:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: config
              mountPath: /config
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: config
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ .Values.persistence.existingClaim | default (printf "%s-storage" (include "bookstack.fullname" .)) }}
          {{- else }}
          emptyDir: {}
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}